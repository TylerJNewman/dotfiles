# This is Git's per-user configuration file.
# Inspired by Kent C. Dodds' dotfiles

[user]
	# Set these values in ~/.gitconfig.local
	# name = Your Name
	# email = your.email@example.com

[include]
	# For user-specific configuration
	path = ~/.gitconfig.local

[core]
	# Use custom `.gitignore`
	excludesfile = ~/.gitignore_global
	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	# Make `git rebase` safer on macOS
	trustctime = false
	# Speed up commands involving untracked files such as `git status`
	untrackedCache = true
	# Use delta for better diff output if available
	pager = delta

[init]
	defaultBranch = main

[pull]
	rebase = true

[push]
	default = current
	# Make `git push` push relevant annotated tags when pushing branches
	followTags = true

[fetch]
	prune = true

[rebase]
	autosquash = true
	autostash = true

[diff]
	# Detect copies as well as renames
	renames = copies
	colorMoved = default

[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1

[color]
	ui = auto

[interactive]
	diffFilter = delta --color-only

[delta]
	navigate = true
	light = false
	side-by-side = true
	line-numbers = true
	theme = "Monokai Extended"

[alias]
	# View abbreviated SHA, description, and history graph
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# Pull in remote changes for the current repository and all its submodules
	p = pull --recurse-submodules

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch --all
	remotes = remote --verbose

	# List aliases
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with main
	# a.k.a. 'delete merged'
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Show the user email for the current repository
	whoami = config user.email

	# Reset to HEAD
	rh = reset --hard HEAD

	# Checkout a branch
	co = checkout

	# Cherry-pick
	cp = cherry-pick

	# Unstage changes
	unstage = reset --soft HEAD

	# Show diff of a specific commit
	cdiff = "!git diff $1 $1^" 